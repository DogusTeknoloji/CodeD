// <auto-generated />
using System;
using CodeD.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CodeD.Infrastructure.Migrations
{
    [DbContext(typeof(CodeDDbContext))]
    [Migration("20250305103719_First Migration")]
    partial class FirstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CodeD.Domain.Categories.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<long>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("RowId"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<long>("RowId"), 1L, null, null, null, null, null);

                    b.Property<uint?>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("RowId")
                        .IsUnique()
                        .HasDatabaseName("UQ_Category_RowId")
                        .HasAnnotation("Npgsql:IndexClustered", true);

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("RowId"), "btree");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("CodeD.Domain.Categories.Category", b =>
                {
                    b.OwnsOne("CodeD.Domain.Abstractions.ExternalReference", "ExternalReference", b1 =>
                        {
                            b1.Property<Guid>("CategoryId")
                                .HasColumnType("uuid");

                            b1.Property<string>("ItemId")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("character varying(64)")
                                .HasColumnName("SourceItemId");

                            b1.Property<string>("ProviderKey")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("character varying(64)")
                                .HasColumnName("SourceProviderKey");

                            b1.Property<string>("Version")
                                .HasMaxLength(64)
                                .HasColumnType("character varying(64)")
                                .HasColumnName("SourceVersion");

                            b1.HasKey("CategoryId");

                            b1.ToTable("Category");

                            b1.WithOwner()
                                .HasForeignKey("CategoryId");
                        });

                    b.OwnsOne("CodeD.Domain.Abstractions.WhoColumns", "WhoColumns", b1 =>
                        {
                            b1.Property<Guid>("CategoryId")
                                .HasColumnType("uuid");

                            b1.Property<DateTimeOffset>("CreatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("CreatedAt");

                            b1.Property<Guid>("CreatedBy")
                                .HasColumnType("uuid")
                                .HasColumnName("CreatedBy");

                            b1.Property<DateTimeOffset>("ModifiedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("ModifiedAt");

                            b1.Property<Guid>("ModifiedBy")
                                .HasColumnType("uuid")
                                .HasColumnName("ModifiedBy");

                            b1.HasKey("CategoryId");

                            b1.ToTable("Category");

                            b1.WithOwner()
                                .HasForeignKey("CategoryId");
                        });

                    b.Navigation("ExternalReference")
                        .IsRequired();

                    b.Navigation("WhoColumns")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
